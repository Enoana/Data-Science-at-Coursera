getwd()
cd
cd()
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
clear()
library(wrirl)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
?read.csv()
?quantyile
?quantile
?xtab
?xtabs
?cut
?ntile
library(dplyr)
?ntile
?quantile
install.packages("stringr")
install.packages("lubridate")
?strsplit()
?factor
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
swirl()
?image()
?t
dataMatrix<-matrix(rnorm(400), nrow=40)
dataMatrix
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(1, 5))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(1, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
T<-t(dataMatrix)
T
par(mar = rep(2, 4))
image(1:10, 1:40, T[, nrow(dataMatrix):1])
nrow(dataMatrix):1
image(1:10, 1:40, T)
image(1:10, 1:40, T[, nrow(dataMatrix):1])
T[, nrow(dataMatrix):1]
T
1:10
M<-matrix(rnorm(400), nrow=40)
T<-t(M) #40 oszlop, 10 sor
par(mar = rep(2, 4))
image(1:10, 1:40, T[, nrow(M):1]) #40:1 because that is the column number for T, plus it is a reversed order
image(1:10, 1:40, T)
image(1:10, 1:40,M)
image(1:40, 1:100, M)
image(1:40, 1:10, M)
image(1:10, 1:40, T[, nrow(M):1])
image(1:10, 1:40, T)
image(1:10, 1:40, T[, nrow(M):1])
image(1:10, 1:40, T)
?"matrix"
matrix(rnorm(10), rnorm(5))
matrix(c(rnorm(10), rnorm(5))
)
matrix(row(1:10),ncol(1:5))
matrix(nrow(1:10),ncol(1:5))
matrix(row(1:10),col(1:5))
matrix(2,3)
matrix(2:5,3)
matrix(c(2:5),3)
matrix(c(2:5),4)
matrix(1:6,2)
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
set.seed(2)
?set.seed
M<-matrix(rnorm(400), nrow=40)
T<-t(M) #40 oszlop, 10 sor, transposition means that the rows of M are written as columns of T
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
M[i, ] <- M[i, ] + rep(c(0, 3), each = 5)
}
}
par(mar = rep(2, 4))
image(1:10, 1:40, T[, nrow(M):1])
M<-matrix(rnorm(400), nrow=40)
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
M[i, ] <- M[i, ] + rep(c(0, 3), each = 5)
}
}
T<-t(M) #40 oszlop, 10 sor, transposition means that the rows of M are written as columns of T
par(mar = rep(2, 4))
image(1:10, 1:40, T[, nrow(M):1])
heatmap(M)
heatmap(T)
heatmap(M)
hh <- hclust(dist(M))
MOrdered <- M[hh$order, ]
par(mfrow = c(1, 3))
image(t(MOrdered)[, nrow(MOrdered):1])
plot(rowMeans(MOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
hh <- hclust(dist(M))
MOrdered <- M[hh$order, ]
par(mfrow = c(1, 3))
image(t(MOrdered)[, nrow(MOrdered):1])
?order
hh <- hclust(dist(M))
MOrdered <- M[,hh$order]
#MOrdered <- M[hh$order, ]
par(mfrow = c(1, 3))
image(t(MOrdered)[, nrow(MOrdered):1])
plot(rowMeans(MOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(MOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
hh <- hclust(dist(M))
MOrdered <- M[,hh$order]
#MOrdered <- M[hh$order, ]
par(mfrow = c(1, 3))
image(t(MOrdered)[, nrow(MOrdered):1])
plot(rowMeans(MOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(MOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
sum(hh)
head(hh)
hh <- hclust(dist(M))
names(hh)
hh$order
?hclust
hh <- hclust(dist(M))
#names(hh)
MOrdered <- M[,hh$order] #hh$order is the order column: a vector giving the permutation of the original observations suitable for plotting
par(mfrow = c(1, 3))
image(t(MOrdered)[, nrow(MOrdered):1])
plot(rowMeans(MOrdered), xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(MOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
par(mfrow = c(1, 3))
image(t(MOrdered)[, nrow(MOrdered):1])
plot(rowMeans(MOrdered),40:1 xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(MOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
par(mfrow = c(1, 3))
image(t(MOrdered)[, nrow(MOrdered):1])
plot(rowMeans(MOrdered),40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(MOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
par(mfrow = c(1, 3))
image(t(MOrdered)[, nrow(MOrdered):1])
plot(rowMeans(MOrdered),1:40, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(MOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
par(mfrow = c(1, 3))
image(t(MOrdered)[, nrow(MOrdered):1])
plot(rowMeans(MOrdered),1:40, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(MOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
?plot
rowMeans(MOrdered)
colMeans(MOrdered)
plot(colMeans(MOrdered)
)
plot(rowMeans(MOrdered))
plot(rowMeans(MOrdered),1:40)
plot(rowMeans(MOrdered),40:1)
plot(rowMeans(MOrdered),1:40)
plot(rowMeans(MOrdered))
rowMeans[10]
rowMeans(MOrdered)[10]
plot(y= rowMeans(MOrdered), xlab = "Row Mean", ylab = "Row", pch = 19)
plot(y= rowMeans(MOrdered), x= 1:40, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(rowMeans(MOrdered),1:40, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(rowMeans(MOrdered),40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(rowMeans(MOrdered),40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(y= rowMeans(MOrdered), x= 1:40, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(x= rowMeans(MOrdered), y= 1:40, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(x= rowMeans(MOrdered), y= 1:40, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(x= rowMeans(MOrdered), y= 40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(rowMeans(MOrdered),1:40, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(x= rowMeans(MOrdered), y= 1:40, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(rowMeans(MOrdered),1:40, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(rowMeans(MOrdered), xlab = "Row Mean", ylab = "Row", pch = 19)
plot(rowMeans(MOrdered),40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
image(t(MOrdered)[, nrow(MOrdered):1])
plot(rowMeans(MOrdered),40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
#equivalent: plot(x= rowMeans(MOrdered), y= 1:40, xlab = "Row Mean", ylab = "Row", pch = 19)
#unless you specify 40:1, the matrix is interpreted as x=rows, y=columns
plot(colMeans(MOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
par(mfrow = c(1, 3))
image(t(MOrdered)[, nrow(MOrdered):1])
plot(rowMeans(MOrdered),40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
#equivalent: plot(x= rowMeans(MOrdered), y= 1:40, xlab = "Row Mean", ylab = "Row", pch = 19)
#unless you specify 40:1, the matrix is interpreted as x=rows, y=columns
plot(colMeans(MOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
plot(rowMeans(MOrdered),40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(x= rowMeans(MOrdered), y= 1:40, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(x= rowMeans(MOrdered), y= 40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(M)
plot(rowMeans(MOrdered),1:40, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(rowMeans(MOrdered),40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
image(t(MOrdered)[, nrow(MOrdered):1])
plot(MOrdered)
plot(rowMeans(MOrdered))
plot(rowMeans(MOrdered),1:40, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(rowMeans(MOrdered),40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
image(t(MOrdered)[, nrow(MOrdered):1])
hh
hh[,]
hh <- hclust(dist(M))
hh
names(hh)
hh$labels
hh$merge
hh$order
hh$method
hh$height
image(t(M)[,40:1])
plot(t(M)[,40:1])
plot(t(M)[,40:1], pch=19)
plot(M, pch=19)
setwd("C:/Adatok/coursera_edX/4_Exploratory Data analysis/Quizes_Assignments/Assignment2")
unzip("exdata-data-NEI_data.zip")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
library(plyr)
library(dplyr)
match <- levels(SCC[,4])[45:52]  #identifying motor vehicle sources
match1<-SCC[SCC$EI.Sector %in% match, c(1,4)]
#table(match1$EI.Sector) # to check that the match subsetted the rigth observations
BLA<-NEI[NEI$fips %in% c("24510", "06037"),] #subset for Baltimore & LA
B<-merge(match1, BLA, by.x= "SCC", by.y= "SCC" ) # subsetting BLA based on the match
B<-mutate(B, city= factor(fips == "06037", labels= c("Baltimore", "Los Angeles"))) #creating new factor variable-> city
b<-ddply(B,.(year, city),summarise, Emission = sum(Emissions)) # calculating sum of Emission for each year
#Plot6
library(ggplot2)
png("plot6.png", width= 960, height= 480)
g<-ggplot(b, aes(year, Emission))
g +
facet_grid(.~city) +
geom_point(aes(color= city), size=4) +
geom_smooth(method= "lm") +
labs(title= "Comparing PM2.5 emissions for Baltimore and Los Angeles from motor vehicle sources") +
labs(x= expression("Year"), y=expression("Total emission of PM2.5 [tonnes]")) +
theme_gray(base_family= "Times")
dev.off()
NEI <- readRDS("summarySCC_PM25.rds")
match <- levels(SCC[,4])[45:52]  #identifying motor vehicle sources
match <- levels(SCC[,4])[45:52]  #identifying motor vehicle sources
match <- levels(SCC[,4])[45:52]  #identifying motor vehicle sources
match <- levels(SCC[,4])[45:52]  #identifying motor vehicle sources
library(ggplot2)
g +
geom_smooth(method= "lm") +
labs(title= "Comparing PM2.5 emissions for Baltimore and Los Angeles from motor vehicle sources") +
labs(x= expression("Year"), y=expression("Total emission of PM2.5 [tonnes]")) +
theme_gray(base_family= "Times")
#dev.off()
setwd("C:/Adatok/coursera_edX/4_Exploratory Data analysis/Quizes_Assignments/Assignment2")
unzip("exdata-data-NEI_data.zip")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
library(plyr)
library(dplyr)
match <- levels(SCC[,4])[45:52]  #identifying motor vehicle sources
match1<-SCC[SCC$EI.Sector %in% match, c(1,4)]
#table(match1$EI.Sector) # to check that the match subsetted the rigth observations
BLA<-NEI[NEI$fips %in% c("24510", "06037"),] #subset for Baltimore & LA
B<-merge(match1, BLA, by.x= "SCC", by.y= "SCC" ) # subsetting BLA based on the match
B<-mutate(B, city= factor(fips == "06037", labels= c("Baltimore", "Los Angeles"))) #creating new factor variable-> city
b<-ddply(B,.(year, city),summarise, Emission = sum(Emissions)) # calculating sum of Emission for each year
#Plot6
library(ggplot2)
#png("plot6.png", width= 960, height= 480)
g<-ggplot(b, aes(year, Emission))
g +
facet_grid(.~city) +
geom_point(aes(color= city), size=4) +
geom_smooth(method= "lm") +
labs(title= "Comparing PM2.5 emissions for Baltimore and Los Angeles from motor vehicle sources") +
labs(x= expression("Year"), y=expression("Total emission of PM2.5 [tonnes]")) +
theme_gray(base_family= "Times")
#dev.off()
setwd("C:/Adatok/coursera_edX/4_Exploratory Data analysis/Quizes_Assignments/Assignment2")
unzip("exdata-data-NEI_data.zip")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
library(plyr)
library(dplyr)
match <- levels(SCC[,4])[45:52]  #identifying motor vehicle sources
match1<-SCC[SCC$EI.Sector %in% match, c(1,4)]
#table(match1$EI.Sector) # to check that the match subsetted the rigth observations
BLA<-NEI[NEI$fips %in% c("24510", "06037"),] #subset for Baltimore & LA
B<-merge(match1, BLA, by.x= "SCC", by.y= "SCC" ) # subsetting BLA based on the match
B<-mutate(B, city= factor(fips == "06037", labels= c("Baltimore", "Los Angeles"))) #creating new factor variable-> city
b<-ddply(B,.(year, city),summarise, Emission = sum(Emissions)) # calculating sum of Emission for each year
#Plot6
library(ggplot2)
png("plot6.png", width= 960, height= 480)
g<-ggplot(b, aes(year, Emission))
g +
facet_grid(.~city) +
geom_point(aes(color= city), size=4) +
geom_smooth(method= "lm") +
labs(title= "Comparing PM2.5 emissions for Baltimore and Los Angeles from motor vehicle sources") +
labs(x= expression("Year"), y=expression("Total emission of PM2.5 [tonnes]")) +
theme_gray(base_family= "Times")
dev.off()
names(SCC)
head(SCC)
levels(SCC$EI.Sector)
names(NEI)
head(NEI)
nrow(NEI)
table(match1)
table(match1)
table(match1$EI.Sector)
head(match1)
b
SCC[5:25,10]
SCC[5:55,75]
SCC[55:75,10]
match1<-grepl("[Cc][o][a][l]", SCC[,10])
head(match1)
match<-SCC[match1, c(1,10)]
head(match)
tail(match)
NEI3<-merge(match, NEI, by.x= "SCC", by.y= "SCC" )
nrow(NEI3)
NEI3<-merge(match, NEI, by.x= "SCC", by.y= "SCC" ) # subsetting NEI based on the match
d4<-ddply(NEI3,.(year),summarise, Emission = sum(Emissions)) # calculating sum of Emission for each year
d4
